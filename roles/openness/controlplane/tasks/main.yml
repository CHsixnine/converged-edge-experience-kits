# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2019-2020 Intel Corporation

---
- name: make sure openness, openness/certs and openness/configs exist
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ openness_user_group }}"
  with_items:
    - "{{ openness_dir }}"
    - "{{ _certs_dest }}"
    - "{{ _configs_dest }}"
  become: yes

- name: create openness namespace if needed
  block:
    - name: check if openness namespace exists
      command: kubectl get ns openness
      ignore_errors: yes
      register: get_ns_openness
    - name: create openness namespace
      command: kubectl create namespace openness
      when: get_ns_openness.rc == 1

- name: generate certs of openness components
  include_tasks: certs.yml

- name: create Certificate Requester CA secret
  block:
  - name: check if Certificate Requester CA secret exists
    command: kubectl get secret ca-certrequester
    ignore_errors: yes
    register: get_secret_certrequester
  - name: create secret with Certificate Requester certs
    shell: >
      kubectl create secret generic ca-certrequester
      --from-file={{ _certs_dest }}/CA/cert.pem
    when: get_secret_certrequester.rc != 0

- name: create Certificate Requester CA secret in openness namespace
  block:
  - name: check if Certificate Requester CA secret exists in openness namespace
    command: kubectl get secret ca-certrequester --namespace openness
    ignore_errors: yes
    register: get_secret_certrequester
  - name: create secret with Certificate Requester certs in openness namespace
    shell: >
      kubectl create secret generic ca-certrequester
      --from-file={{ _certs_dest }}/CA/cert.pem
      --namespace openness
    when: get_secret_certrequester.rc != 0

- name: apply openness definitions
  command: kubectl apply -f {{ item }}
  with_items: "{{ _openness_yamls }}"
  changed_when: true

- name: delete eaa definitions
  command: kubectl delete {{ item }} eaa -n openness
  changed_when: true
  when: not eaa_enable
  with_items:
    - deployment
    - service

- name: delete edgedns definitions
  command: kubectl delete {{ item }} edgedns -n openness
  changed_when: true
  when: not dns_enable
  with_items:
    - daemonset
    - service

- name: copy logrotate config
  copy:
    src: logrotate_openness
    dest: /etc/logrotate.d/openness
    remote_src: no
  become: yes

- name: build CLIs
  include_tasks: build_cli.yml
  when: dns_enable

- name: deploy interface service for kube-ovn
  include_tasks: kube-ovn.yml
  when: "'kubeovn' in kubernetes_cnis"
