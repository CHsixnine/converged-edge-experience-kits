# Copyright 2019 Intel Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

- name: make sure /etc/openness, /etc/openness/certs and /etc/openness/configs exist
  file:
    path: "{{ item }}"
    state: directory
  with_items:
  - /etc/openness
  - "{{ certs_dest }}"
  - "{{ configs_dest }}"

- name: create openness namespace if needed
  block:
  - name: check if openness namespace exists
    shell: kubectl get ns openness
    ignore_errors: yes
    register: get_ns_openness
  - name: create openness namespace
    shell: kubectl create namespace openness
    when: get_ns_openness.rc == 1

- name: root CA creation
  block:
  - name: create directory for root CA
    file:
      name: "{{ certs_dest }}/CA"
      state: directory
  - name: create root CA
    shell: "{{ git_repo_dest }}/ansible/scripts/other/tls_pair.sh openness {{ certs_dest }}/CA"

- name: create root CA secret
  block:
  - name: check if root CA secret exists
    shell: kubectl get secret root-ca --namespace=openness
    ignore_errors: yes
    register: get_secret_rootca
  - name: create secret with root CA
    shell: >
      kubectl create secret generic root-ca
      --from-file={{ certs_dest }}/CA/key.pem
      --from-file={{ certs_dest }}/CA/cert.pem
      --namespace=openness
    when: get_secret_rootca.rc == 1

- name: create certificate generator secret
  block:
  - name: check if certificate generator secret exists
    shell: kubectl get secret certgen --namespace=openness
    ignore_errors: yes
    register: get_secret_certgen
  - name: create secret with certificate generator
    shell: >
      kubectl create secret generic certgen
        --from-file={{ git_repo_dest }}/ansible/scripts/other/tls_pair.sh
        --from-file={{ git_repo_dest }}/ansible/scripts/other/entrypoint_tls.sh
        --namespace=openness
    when: get_secret_certgen.rc == 1

- name: generate certs of openness components
  include_tasks: certs.yml

- name: create syslog configmap
  block:
  - name: check if syslog configmap exists
    shell: kubectl get configmap syslog-conf --namespace=openness
    ignore_errors: yes
    register: get_configmap_syslog
  - name: create configmap with syslog configs
    shell: >
      kubectl create configmap syslog-conf
      --from-file={{ git_repo_dest }}/kube-ovn/syslog-ng-k8s-master.conf
      --from-file={{ git_repo_dest }}/kube-ovn/syslog-ng-k8s-worker.conf
      --namespace=openness
    when: get_configmap_syslog.rc == 1

- name: apply openness definitions
  command: kubectl apply -f {{ item }}
  with_items: "{{ openness_yamls }}"

- name: copy logrotate config
  copy:
    src: logrotate_openness
    dest: /etc/logrotate.d/openness
    remote_src: no

- name: build CLIs
  include_tasks: build_cli.yml
