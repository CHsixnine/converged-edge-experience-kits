# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2020 Intel Corporation

---

- name: get number of VCA nodes
  shell: set -o pipefail && vcactl status | grep Card | wc -l
  changed_when: true
  register: num_vca

- debug: msg="Detected {{ num_vca.stdout | int }} VCAC-A cards"

- name: build system image of VCA node
  command: "./vcad_build.sh -c -o FULL --silent silent.cfg"
  args:
    creates: "{{ _vca_dest }}/VCAC-A/Intel_Media_Analytics_Node/build/vcad/INSTALL/"
    chdir: "{{ _vca_dest }}/VCAC-A/Intel_Media_Analytics_Node/scripts"
  ignore_errors: yes
  register: ret
  failed_when: >
    ('ERROR' in ret.stderr) or
    ('Error' in ret.stderr) or
    ('error' in ret.stderr)

- name: unarchive VCAC-A vcad image
  command: "gzip -d {{ _vca_vcad_image }}.gz"
  args:
    chdir: "{{ _vca_dest }}/VCAC-A/Intel_Media_Analytics_Node/build/vcad/INSTALL/"
    creates: "{{ _vca_vcad_image }}"

- name: copy vcad image for multiple VCA cards
  copy:
    src: "{{ _vca_dest }}/VCAC-A/Intel_Media_Analytics_Node/build/vcad/INSTALL/{{ _vca_vcad_image }}"
    dest: "{{ _vca_dest }}/VCAC-A/Intel_Media_Analytics_Node/build/vcad/INSTALL/{{ vca_idx | int - 1 }}{{ _vca_vcad_image }}"
    remote_src: yes
    mode: preserve
  loop_control:
    loop_var: vca_idx
  with_sequence: count="{{ num_vca.stdout | int }}"

- name: copy vca init scripts
  copy:
    src: "{{ item }}"
    dest: "{{ _vca_dest }}"
    mode: a+x
  with_items:
    - init_vca.sh
    - shutdown_vca.sh
    - setup_firewall.sh

- name: unload VCAC-A vcad image
  shell: |
    "{{ _vca_dest }}/shutdown_vca.sh"
    vcactl blockio close {{ vca_idx | int - 1 }} 0 vcablk0
  changed_when: true
  loop_control:
    loop_var: vca_idx
  with_sequence: count="{{ num_vca.stdout | int }}"

- name: load VCAC-A vcad image
  command: "vcactl blockio open {{ vca_idx | int - 1 }} 0 vcablk0 RW {{ vca_idx | int - 1 }}{{ _vca_vcad_image }}"
  args:
    chdir: "{{ _vca_dest }}/VCAC-A/Intel_Media_Analytics_Node/build/vcad/INSTALL/"
  changed_when: true
  loop_control:
    loop_var: vca_idx
  with_sequence: count="{{ num_vca.stdout | int }}"

- name: configure VCAC-A node hostname
  command: "vcactl config {{ vca_idx | int - 1 }} 0 node-name {{ inventory_hostname }}-vca{{ vca_idx }}"
  changed_when: true
  loop_control:
    loop_var: vca_idx
  with_sequence: count="{{ num_vca.stdout | int }}"

- name: set VCAC-A init script at system boot
  lineinfile:
    path: /etc/rc.d/rc.local
    regexp: '^{{ _vca_dest }}'
    line: '{{ _vca_dest }}/init_vca.sh'
    insertafter: EOF
    mode: u+x,g+x,o+x

- name: initialize VCAC-A
  command: "{{ _vca_dest }}/init_vca.sh"
  register: init_vca
  failed_when: init_vca.rc != 0
  changed_when: init_vca.rc == 0

- name: update firewall settings for VCAC-A
  command: "{{ _vca_dest }}/setup_firewall.sh"
  register: setup_firewall
  failed_when: setup_firewall.rc != 0
  changed_when: setup_firewall.rc == 0

- debug: msg="{{ init_vca.stdout }}"

- name: configure all VCA nodes
  include_tasks: configure_vca_nodes.yml
  vars:
    vca_node_ip: "172.32.{{ vca_idx }}.1"
  loop_control:
    loop_var: vca_idx
  with_sequence: count="{{ num_vca.stdout | int }}"

- name: download hddl-daemon yaml
  get_url:
    url: "{{ _vca_hddl_yaml }}"
    dest: /tmp/hddl_daemonset.yaml
    force: yes
  delegate_to: "{{ groups['controller_group'][0] }}"
  register: result
  retries: "{{ number_of_retries }}"
  until: result is succeeded
  delay: "{{ retry_delay }}"

- name: update hddl-daemon yaml to use vcaca-ubuntu1804-analytics-hddldaemon:20.2
  replace:
    path: /tmp/hddl_daemonset.yaml
    regexp: 'vcaca-ubuntu1804-analytics-hddldaemon'
    replace: 'vcaca-ubuntu1804-analytics-hddldaemon:20.2'
  delegate_to: "{{ groups['controller_group'][0] }}"

- name: deploy hddl-daemon for VCA node
  command: kubectl apply -f /tmp/hddl_daemonset.yaml
  delegate_to: "{{ groups['controller_group'][0] }}"
  changed_when: true

- name: wait for hddldaemon pod to come up
  shell: set -o pipefail && kubectl get pods -n kube-system -l app=intel-vpu-hddl | awk '$3=="Running"'
  register: hddldaemon_pod_running
  retries: 30
  delay: 10
  until: hddldaemon_pod_running.rc == 0
  changed_when: false

- name: run vpu metrics on all VCA nodes -- this automatically starts hddl daemon
  command: "ssh {{ vca_node_ip }} /opt/intel/vcaa/vpu_metric/run.sh start"
  register: run_vpu_metrics
  failed_when: run_vpu_metrics.rc != 0
  changed_when: run_vpu_metrics.rc == 0
  vars:
    vca_node_ip: "172.32.{{ vca_idx }}.1"
  loop_control:
    loop_var: vca_idx
  with_sequence: count="{{ num_vca.stdout | int }}"

- name: deploy vca policy that uses this vpu metrics
  block:
    - name: create tmp folder
      tempfile:
        state: directory
        suffix: .vca_policy
      register: tmp_dir
    - name: copy vca policy files
      copy:
        src: "vca-tas-policy.yaml"
        dest: "{{ tmp_dir.path }}/"
    - name: deploy the vca policy
      command: kubectl apply -f "{{ tmp_dir.path }}/vca-tas-policy.yaml"
      changed_when: true
  delegate_to: "{{ groups['controller_group'][0] }}"
  run_once: true
