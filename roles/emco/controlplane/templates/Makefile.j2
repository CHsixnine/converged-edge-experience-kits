# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2019-2020 Intel Corporation

export GO111MODULE=on
export EMCOBUILDROOT=$(shell pwd)

all: build

clean:
	@echo "Cleaning artifacts"
	$(MAKE) -C ./src/clm clean
	$(MAKE) -C ./src/monitor clean
	$(MAKE) -C ./src/ncm clean
	$(MAKE) -C ./src/orchestrator clean
	$(MAKE) -C ./src/ovnaction clean
	$(MAKE) -C ./src/rsync clean
	$(MAKE) -C ./src/dcm clean
	$(MAKE) -C ./src/tools/emcoctl clean
	@rm -rf bin
	@echo "    Done."

pre-compile: clean
	@echo "Setting up pre-requisites"
	@mkdir -p bin/clm bin/monitor bin/ncm bin/orchestrator bin/ovnaction bin/rsync bin/dcm bin/emcoctl
	@cp -r src/clm/config.json src/clm/json-schemas bin/clm
	@cp -r src/ncm/config.json src/ncm/json-schemas bin/ncm
	@cp -r src/orchestrator/config.json src/orchestrator/json-schemas bin/orchestrator
	@cp -r src/ovnaction/config.json src/ovnaction/json-schemas bin/ovnaction
	@cp -r src/rsync/config.json bin/rsync
	@cp -r src/dcm/config.json bin/dcm
	@echo "    Done."

compile-container: pre-compile
	@echo "Building artifacts"
	( $(MAKE) -C ./src/clm all & \
	  $(MAKE) -C ./src/monitor all & \
	  $(MAKE) -C ./src/ncm all & \
	  $(MAKE) -C ./src/orchestrator all & \
	  $(MAKE) -C ./src/ovnaction all & \
	  $(MAKE) -C ./src/rsync all & \
	  $(MAKE) -C ./src/dcm all & \
	  $(MAKE) -C ./src/tools/emcoctl all; \
	  wait $(jobs -pr); \
	)
	@echo "    Done."

compile:
	@echo "Building microservices within Docker build container"
	@docker run --rm --user `id -u`:`id -g` --env GO111MODULE --env XDG_CACHE_HOME=/tmp/.cache -v `pwd`:/repo emco-service-build-base:latest /bin/sh -c "cd /repo; make compile-container"
	@echo "    Done."

build: compile
	@echo "Packaging microservices "
	@echo "Packaging CLM"
	@docker build --rm -t emco-clm -f ./build/docker/Dockerfile.clm ./bin/clm
	@echo "Packaging NCM"
	@docker build --rm -t emco-ncm -f ./build/docker/Dockerfile.ncm ./bin/ncm
	@echo "Packaging Orchestrator"
	@docker build --rm -t emco-orch -f ./build/docker/Dockerfile.orchestrator ./bin/orchestrator
	@echo "Packaging OvnAction"
	@docker build --rm -t emco-ovn -f ./build/docker/Dockerfile.ovn ./bin/ovnaction
	@echo "Packaging RSync"
	@docker build --rm -t emco-rsync -f ./build/docker/Dockerfile.rsync ./bin/rsync
	@echo "Packing DCM"
	@docker build --rm -t emco-dcm -f ./build/docker/Dockerfile.dcm ./bin/dcm
	@echo "    Done."

deploy: build
	@echo "Creating helm charts. Pushing microservices to registry & copying docker-compose files if BUILD_CAUSE set to DEV_TEST"
	./scripts/deploy_emco.sh
	@echo "    Done."

tidy:
	@echo "Cleaning up dependencies"
	@cd src/clm; go mod tidy
	@cd src/dcm; go mod tidy
	@cd src/monitor; go mod tidy
	@cd src/ncm; go mod tidy
	@cd src/orchestrator; go mod tidy
	@cd src/ovnaction; go mod tidy
	@cd src/rsync; go mod tidy
	@cd src/tools/emcoctl; go mod tidy
	@echo "    Done."

vendor:
	@echo "Vendoring dependencies"
	@cd src/clm; go mod vendor
	@cd src/dcm; go mod vendor
	@cd src/monitor; go mod vendor
	@cd src/ncm; go mod vendor
	@cd src/orchestrator; go mod vendor
	@cd src/ovnaction; go mod vendor
	@cd src/rsync; go mod vendor
	@cd src/tools/emcoctl; go mod vendor
	@echo "    Done."

build-base:
	@echo "Building base images and pushing to Harbor"
	./scripts/build-base-images.sh
