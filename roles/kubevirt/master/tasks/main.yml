# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2020 Intel Corporation

---

- name: Install KubeVirt
  block:
  - name: create temporary directory
    tempfile:
      state: directory
      suffix: kubevirt-operator
    register: tmp_dir
  - name: download KV Operator
    get_url:
      url: "{{ _kubevirt_operator_url }}"
      dest: "{{ tmp_dir.path }}/virt-operator.yaml"
    register: result
    retries: "{{ number_of_retries }}"
    until: result is succeeded
    delay: "{{ retry_delay }}"
  - name: template kustomization.yml to tmp directory
    template:
      src: kustomization.yml.j2
      dest: "{{ tmp_dir.path }}/kustomization.yml"
    with_items:
      - virt
  - name: copy CMK toleration patch to tmp directory
    copy:
      src: add_cmk_toleration.yml
      dest: "{{ tmp_dir.path }}/"
  - name: KV Operator Install
    shell: kubectl kustomize . | kubectl apply -f -
    args:
      chdir: "{{ tmp_dir.path }}"
  - name: KV Controller Install
    command: kubectl apply -f "{{ _kubevirt_cr_url }}"
    register: result
    retries: "{{ number_of_retries }}"
    until: result is succeeded
    delay: "{{ retry_delay }}"
  - name: remove temporary directory
    file:
      path: "{{ tmp_dir.path }}"
      state: absent
    when: tmp_dir.path is defined

- name: download Krew plugin
  block:
  - name: make Krew directory
    file:
      path: "{{ _krew_dir }}"
      state: directory
  - name: check if already downloaded
    stat:
      path: "{{ _krew_dir }}/krew.tar.gz"
    register: krew_download
  - name: download Krew yaml
    get_url:
      url: "{{ _krew_tar_url }}"
      dest: "{{ _krew_dir }}"
    register: result
    retries: "{{ number_of_retries }}"
    until: result is succeeded
    delay: "{{ retry_delay }}"
    when: not krew_download.stat.exists
  - name: download Krew tar.gz
    get_url:
      url: "{{ _krew_yaml_url }}"
      dest: "{{ _krew_dir }}"
    register: result
    retries: "{{ number_of_retries }}"
    until: result is succeeded
    delay: "{{ retry_delay }}"
    when: not krew_download.stat.exists
  - name: Unpack Krew
    unarchive:
      src: "{{ _krew_dest }}"
      dest: "{{ _krew_dir }}"
      remote_src: True
      extra_opts: "--strip-components=1"

- name: install Krew plugin
  block:
  - name: Install Krew
    shell: KREW=./krew-"$(uname | tr '[:upper:]' '[:lower:]')_amd64" && "$KREW" install --manifest=krew.yaml --archive=krew.tar.gz
    args:
      chdir: "{{ _krew_dir }}"
  - name: Update Krew
    shell: KREW=./krew-"$(uname | tr '[:upper:]' '[:lower:]')_amd64" && "$KREW" update
    args:
      chdir: "{{ _krew_dir }}"
  - name: Add path to profile
    lineinfile:
      state: present
      dest: /etc/profile
      line: export PATH="${PATH}:${HOME}/.krew/bin"

- name: install Virtctl plugin
  shell: ${HOME}/.krew/bin/kubectl-krew install virt
  changed_when: true

- name: install CDI
  block:
  - name: create temporary directory
    tempfile:
      state: directory
      suffix: cdi-operator
    register: tmp_dir
  - name: download CDI Operator
    get_url:
      url: "{{ _cdi_operator_url }}"
      dest: "{{ tmp_dir.path }}/"
    register: result
    retries: "{{ number_of_retries }}"
    until: result is succeeded
    delay: "{{ retry_delay }}"
  - name: template kustomization.yml to tmp directory
    template:
      src: kustomization.yml.j2
      dest: "{{ tmp_dir.path }}/kustomization.yml"
    with_items:
      - cdi
  - name: copy CMK toleration patch to tmp directory
    copy:
      src: add_cmk_toleration.yml
      dest: "{{ tmp_dir.path }}/"
  - name: KV Operator Install
    shell: kubectl kustomize . | kubectl apply -f -
    args:
      chdir: "{{ tmp_dir.path }}"
  - name: CDI Operator Install
    command: kubectl apply -f "{{ _cdi_operator_url }}"
    register: result
    retries: "{{ number_of_retries }}"
    until: result is succeeded
    delay: "{{ retry_delay }}"
  - name: CDI Controller Install
    command: kubectl apply -f "{{ _cdi_cr_url }}"
    register: result
    retries: "{{ number_of_retries }}"
    until: result is succeeded
    delay: "{{ retry_delay }}"
  - name: remove temporary directory
    file:
      path: "{{ tmp_dir.path }}"
      state: absent
    when: tmp_dir.path is defined

- name: label CDI namespace
  command: kubectl label namespace/cdi ns=cdi --overwrite=true
  changed_when: true

- name: create temp directory for KubeVirt related yaml
  tempfile:
    state: directory
    suffix: -kubevirt
  register: kv_dir

- name: copy traffic rule file for CDI
  copy:
    src: cdiNetworkPolicy.yaml
    dest: "{{ kv_dir.path }}/cdiNetworkPolicy.yaml"

- name: copy Local Volume Storage Class
  copy:
    src: localStorageClass.yaml
    dest: "{{ kv_dir.path }}/localStorageClass.yaml"

- name: check if CDI traffic rule exists
  command: kubectl get networkpolicy cdi-upload-proxy-policy
  ignore_errors: yes
  register: cdi_exist
  changed_when: false

- name: set CDI traffic rule
  command: kubectl create -f cdiNetworkPolicy.yaml
  args:
    chdir: "{{ kv_dir.path }}"
  changed_when: true
  when: cdi_exist.rc != 0

- name: check if LVSC exists
  command: kubectl get sc local-storage
  ignore_errors: yes
  register: lvsc_exist
  changed_when: false

- name: create Local Volume Storage Class
  command: kubectl create -f localStorageClass.yaml
  args:
    chdir: "{{ kv_dir.path }}"
  when: _storage_class == "local-volume" and lvsc_exist.rc != 0
