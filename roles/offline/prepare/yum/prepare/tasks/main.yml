# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2019-2020 Intel Corporation

---
- name: load apache variables
  include_vars: ../../../../../apache/defaults/main.yml

- name: delete old offline repo folder
  file:
    path: "{{ offline_yum_path }}"
    state: absent
  when: offline_always_redownload_packages == true

- name: get custom_kernel settings
  include_vars: ../../../../machine_setup/custom_kernel/defaults/main.yml

- name: get tuned settings
  include_vars: ../../../../machine_setup/configure_tuned/defaults/main.yml

- name: add custom kernel repository
  include_tasks: ../../../../machine_setup/custom_kernel/tasks/setup_repository.yml
  when: offline_download_kernel

- name: create offline repo folder
  file:
    path: "{{ offline_yum_path }}"
    state: directory

- name: check if a backup of original /etc/yum.conf file already exists
  stat:
    path: /etc/yum.conf.bak
  register: yum_backup_file

- name: make a backup of original /etc/yum.conf
  copy:
    src: /etc/yum.conf
    dest: /etc/yum.conf.bak
    remote_src: yes
  when: yum_backup_file.stat.exists == false

- name: temporarily disable yum excludes
  replace:
    path: /etc/yum.conf
    regexp: '^exclude'
    replace: '#exclude'

- name: fetch machine setup related packages for offline use
  block:
  - name: download custom kernel
    command: repotrack --arch={{ ansible_architecture }} -p {{ offline_yum_path }} {{ item }}
    with_items:
      - "{{ kernel_package }}-{{ kernel_version }}"
      - "{{ kernel_devel_package }}-{{ kernel_version }}"
      - "{{ kernel_dependencies_packages }}"

  - name: download kernel deps URL packages
    get_url:
      url: "{{ item }}"
      dest: "{{ offline_yum_path }}"
    with_items: "{{ kernel_dependencies_urls }}"

  - name: download tuned package
    get_url:
      url: "{{ item }}"
      dest: "{{ offline_yum_path }}"
    with_items: "{{ tuned_packages }}"
  when: offline_download_kernel

- name: download base packages for offline use
  command: repotrack --arch={{ ansible_architecture }} -p {{ offline_yum_path }} {{ item }}
  with_items:
    - "{{ os_yum_base_packages.split(',') }}"
    - "{{ docker_packages.split(',') }}"
    - mariadb
    - audit
    - "{{ apache_packages.split(',') }}"
    - ntp
  changed_when: true

- name: download libvirt packages for offline use
  command: repotrack --arch={{ ansible_architecture }} -p {{ offline_yum_path }} {{ item }}
  with_items:
    - "{{ libvirt_packages.split(',') }}"
  when: libvirt_packages is defined

- name: create offline repo
  command: createrepo {{ offline_yum_path }}
  changed_when: true

- name: create yum repository file
  template:
    src: openness-offline.repo.j2
    dest: "{{ offline_path }}/openness-offline-{{ inventory_hostname }}.repo"
    mode: '0644'

- name: revert /etc/yum.conf changes
  copy:
    src: /etc/yum.conf.bak
    dest: /etc/yum.conf
    remote_src: yes
