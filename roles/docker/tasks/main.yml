# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2019-2020 Intel Corporation

---
- name: add Docker repository
  yum_repository:
    name: docker
    description: Docker CE repository
    baseurl: "{{ _docker_repository_url }}"
    gpgkey: "{{ _docker_repository_key }}"
    gpgcheck: yes
  become: yes
  register: result
  retries: "{{ number_of_retries }}"
  until: result is succeeded
  delay: "{{ retry_delay }}"

- name: clear yum cache
  command: yum clean all
  args:
    warn: false
  changed_when: true

- name: add group "docker"
  group:
    name: docker
    state: present
  become: yes

- name: add group "{{ openness_user_group }}"
  group:
    name: "{{ openness_user_group }}"
    state: present
  become: yes

- name: Add current user to docker group
  user:
    name: "{{ ansible_user }}"
    groups: "docker,{{ openness_user_group }}"
    append: yes
  become: yes

- name: reset connection
  meta: reset_connection

- name: install Docker CE
  yum:
    name: "{{ _docker_packages }}"
    state: present
  become: yes
  notify:
    - enable and start docker service

- name: install pip dependencies
  block:
    - name: copy requirements.txt
      copy:
        src: requirements.txt
        dest: /tmp/requirements.txt
    - name: install dependencies
      pip:
        requirements: /tmp/requirements.txt
        state: present
      register: result
      retries: "{{ number_of_retries }}"
      until: result is succeeded
      delay: "{{ retry_delay }}"
      become: yes
    - name: install docker-compose
      pip:
        name: "{{ _docker_compose_package }}"
        state: present
      register: result
      retries: "{{ number_of_retries }}"
      until: result is succeeded
      delay: "{{ retry_delay }}"
      become: yes

- name: set up proxy
  include_tasks: proxy.yml
  when: proxy_enable|bool

- name: set cgroups driver to systemd and configure docker registries
  block:
    - name: make sure /etc/docker/ exists
      file:
        path: /etc/docker/
        state: directory
    - name: Generate daemon.json
      template:
        src: daemon.json.j2
        dest: /etc/docker/daemon.json
      notify:
        - enable and start docker service
  become: yes

- name: restart services if needed
  meta: flush_handlers

- name: find docker audit files
  stat:
    path: "{{ item }}"
  with_items: "{{ _docker_audit_files }}"
  register: stats

- name: add audit rules for docker
  lineinfile:
    path: /etc/audit/rules.d/docker.rules
    line: "-w {{ item.item }} -k docker"
    create: yes
  become: yes
  when: item.stat.exists
  with_items: "{{ stats.results }}"

- name: restart auditd
  command: service auditd restart # noqa 303
  become: yes
  changed_when: true
  args:
    warn: false

- name: setup docker bash completion
  block:
    - name: download Docker CLI bash completion
      get_url:
        url: "{{ _docker_completion_url }}"
        dest: "/etc/bash_completion.d"
      become: yes
    - name: download Docker Compose bash completion
      get_url:
        url: "{{ _docker_compose_completion_url }}"
        dest: "/etc/bash_completion.d"
      become: yes
- name: create the directory for docker images
  file:
    path: "{{ docker_images_dir }}"
    state: directory

- name: download docker images
  get_url:
    url: "{{ item }}"
    dest: "{{ docker_images_dir }}"
  with_items: "{{ docker_images }}"

- name: find docker images
  find:
    paths: "{{ docker_images_dir }}"
    patterns: "*.tar*"
  register: docker_image_files

- name: load docker images
  command: "docker load -i {{ item.path }}"
  with_items: "{{ docker_image_files.files }}"
  changed_when: true
