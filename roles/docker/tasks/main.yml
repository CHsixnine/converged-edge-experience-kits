# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2019-2020 Intel Corporation

---

- name: add Docker repository
  yum_repository:
    name: docker
    description: Docker CE repository
    baseurl: "{{ _docker_repository_url }}"
    gpgkey: "{{ _docker_repository_key }}"
    gpgcheck: yes
  register: result
  retries: "{{ number_of_retries }}"
  until: result is succeeded
  delay: "{{ retry_delay }}"
  # Do not add remote repositories in offline mode
  when: not (_offline_mode | d(False))

- name: clear yum cache
  command: yum clean all
  args:
    warn: false
  changed_when: true

- name: install Docker CE
  yum:
    name: "{{ _docker_packages }}"
    state: present
  notify:
  - enable and start docker service

- name: install docker-compose
  pip:
    name: "{{ _docker_compose_package }}"
    state: present
  register: result
  retries: "{{ number_of_retries }}"
  until: result is succeeded
  delay: "{{ retry_delay }}"
  when: not (_offline_mode | d(False))

- name: offline | install docker-compose
  pip:
    name: "{{ _docker_compose_package }}"
    state: present
    extra_args: "--no-index --find-links {{ _offline_pip_path }}"
  when: _offline_mode | d(False)

- name: set up proxy
  include_tasks: proxy.yml
  when: proxy_enable|bool

- name: set cgroups driver to systemd
  block:
  - name: make sure /etc/docker/ exists
    file:
      path: /etc/docker/
      state: directory
  - name: set cgroups driver to systemd
    copy:
      src: daemon.json
      dest: /etc/docker/daemon.json
    notify:
    - enable and start docker service

- name: restart services if needed
  meta: flush_handlers

- name: find docker audit files
  stat:
    path: "{{ item }}"
  with_items: "{{ _docker_audit_files }}"
  register: stats

- name: add audit rules for docker
  lineinfile:
    path: /etc/audit/rules.d/docker.rules
    line: "-w {{ item.item }} -k docker"
    create: yes
  when: item.stat.exists
  with_items: "{{ stats.results }}"

- name: restart auditd
  command: service auditd restart # noqa 303
  changed_when: true

- name: setup docker bash completion
  block:
  - name: download Docker CLI bash completion
    get_url:
      url: "{{ _docker_completion_url }}"
      dest: "/etc/bash_completion.d"
  - name: download Docker Compose bash completion
    get_url:
      url: "{{ _docker_compose_completion_url }}"
      dest: "/etc/bash_completion.d"
  when: not (_offline_mode | d(False))

- name: offline | setup docker bash completion
  block:
  - name: copy Docker CLI bash completion
    copy:
      src: "{{ _offline_path }}/docker/docker"
      dest: "/etc/bash_completion.d/"
      remote_src: yes
  - name: copy Docker Compose bash completion
    copy:
      src: "{{ _offline_path }}/docker/docker-compose"
      dest: "/etc/bash_completion.d/"
      remote_src: yes
  when: _offline_mode | d(False)
